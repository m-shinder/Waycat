[CCode (cname = "", cheader_filename = "token.h,graminit.h")]
namespace Python {
	[CCode (cname = "", cprefix = "")]
	public enum Token {
		ENDMARKER, NAME, NUMBER, STRING, NEWLINE, INDENT,
		DEDENT, LPAR, RPAR, LSQB, RSQB, COLON, COMMA, SEMI,
		PLUS, MINUS, STAR, SLASH, VBAR, AMPER, LESS, GREATER,
		EQUAL, DOT, PERCENT, LBRACE, RBRACE, EQEQUAL, NOTEQUAL,
		LESSEQUAL, GREATEREQUAL, TILDE, CIRCUMFLEX, LEFTSHIFT,
		RIGHTSHIFT, DOUBLESTAR, PLUSEQUAL, MINEQUAL, STAREQUAL,
		SLASHEQUAL, PERCENTEQUAL, AMPEREQUAL, VBAREQUAL, CIRCUMFLEXEQUAL,
		LEFTSHIFTEQUAL, RIGHTSHIFTEQUAL, DOUBLESTAREQUAL, DOUBLESLASH,
		DOUBLESLASHEQUAL, AT, ATEQUAL, RARROW, ELLIPSIS,
		COLONEQUAL, OP, AWAIT, ASYNC, TYPE_IGNORE,
		TYPE_COMMENT, ERRORTOKEN, N_TOKENS,
		NT_OFFSET,
		[CCode (cname = "single_input")] SINGLE_INPUT,
		[CCode (cname = "file_input")] FILE_INPUT,
		[CCode (cname = "eval_input")] EVAL_INPUT,
		[CCode (cname = "decorator")] DECORATOR,
		[CCode (cname = "decorators")] DECORATORS,
		[CCode (cname = "decorated")] DECORATED,
		[CCode (cname = "async_funcdef")] ASYNC_FUNCDEF,
		[CCode (cname = "funcdef")] FUNCDEF,
		[CCode (cname = "parameters")] PARAMETERS,
		[CCode (cname = "typedargslist")] TYPEDARGSLIST,
		[CCode (cname = "tfpdef")] TFPDEF,
		[CCode (cname = "varargslist")] VARARGSLIST,
		[CCode (cname = "vfpdef")] VFPDEF,
		[CCode (cname = "stmt")] STMT,
		[CCode (cname = "simple_stmt")] SIMPLE_STMT,
		[CCode (cname = "small_stmt")] SMALL_STMT,
		[CCode (cname = "expr_stmt")] EXPR_STMT,
		[CCode (cname = "annassign")] ANNASSIGN,
		[CCode (cname = "testlist_star_expr")] TESTLIST_STAR_EXPR,
		[CCode (cname = "augassign")] AUGASSIGN,
		[CCode (cname = "del_stmt")] DEL_STMT,
		[CCode (cname = "pass_stmt")] PASS_STMT,
		[CCode (cname = "flow_stmt")] FLOW_STMT,
		[CCode (cname = "break_stmt")] BREAK_STMT,
		[CCode (cname = "continue_stmt")] CONTINUE_STMT,
		[CCode (cname = "return_stmt")] RETURN_STMT,
		[CCode (cname = "yield_stmt")] YIELD_STMT,
		[CCode (cname = "raise_stmt")] RAISE_STMT,
		[CCode (cname = "import_stmt")] IMPORT_STMT,
		[CCode (cname = "import_name")] IMPORT_NAME,
		[CCode (cname = "import_from")] IMPORT_FROM,
		[CCode (cname = "import_as_name")] IMPORT_AS_NAME,
		[CCode (cname = "dotted_as_name")] DOTTED_AS_NAME,
		[CCode (cname = "import_as_names")] IMPORT_AS_NAMES,
		[CCode (cname = "dotted_as_names")] DOTTED_AS_NAMES,
		[CCode (cname = "dotted_name")] DOTTED_NAME,
		[CCode (cname = "global_stmt")] GLOBAL_STMT,
		[CCode (cname = "nonlocal_stmt")] NONLOCAL_STMT,
		[CCode (cname = "assert_stmt")] ASSERT_STMT,
		[CCode (cname = "compound_stmt")] COMPOUND_STMT,
		[CCode (cname = "async_stmt")] ASYNC_STMT,
		[CCode (cname = "if_stmt")] IF_STMT,
		[CCode (cname = "while_stmt")] WHILE_STMT,
		[CCode (cname = "for_stmt")] FOR_STMT,
		[CCode (cname = "try_stmt")] TRY_STMT,
		[CCode (cname = "with_stmt")] WITH_STMT,
		[CCode (cname = "with_item")] WITH_ITEM,
		[CCode (cname = "except_clause")] EXCEPT_CLAUSE,
		[CCode (cname = "suite")] SUITE,
		[CCode (cname = "namedexpr_test")] NAMEDEXPR_TEST,
		[CCode (cname = "test")] TEST,
		[CCode (cname = "test_nocond")] TEST_NOCOND,
		[CCode (cname = "lambdef")] LAMBDEF,
		[CCode (cname = "lambdef_nocond")] LAMBDEF_NOCOND,
		[CCode (cname = "or_test")] OR_TEST,
		[CCode (cname = "and_test")] AND_TEST,
		[CCode (cname = "not_test")] NOT_TEST,
		[CCode (cname = "comparison")] COMPARISON,
		[CCode (cname = "comp_op")] COMP_OP,
		[CCode (cname = "star_expr")] STAR_EXPR,
		[CCode (cname = "expr")] EXPR,
		[CCode (cname = "xor_expr")] XOR_EXPR,
		[CCode (cname = "and_expr")] AND_EXPR,
		[CCode (cname = "shift_expr")] SHIFT_EXPR,
		[CCode (cname = "arith_expr")] ARITH_EXPR,
		[CCode (cname = "term")] TERM,
		[CCode (cname = "factor")] FACTOR,
		[CCode (cname = "power")] POWER,
		[CCode (cname = "atom_expr")] ATOM_EXPR,
		[CCode (cname = "atom")] ATOM,
		[CCode (cname = "testlist_comp")] TESTLIST_COMP,
		[CCode (cname = "trailer")] TRAILER,
		[CCode (cname = "subscriptlist")] SUBSCRIPTLIST,
		[CCode (cname = "subscript")] SUBSCRIPT,
		[CCode (cname = "sliceop")] SLICEOP,
		[CCode (cname = "exprlist")] EXPRLIST,
		[CCode (cname = "testlist")] TESTLIST,
		[CCode (cname = "dictorsetmaker")] DICTORSETMAKER,
		[CCode (cname = "classdef")] CLASSDEF,
		[CCode (cname = "arglist")] ARGLIST,
		[CCode (cname = "argument")] ARGUMENT,
		[CCode (cname = "comp_iter")] COMP_ITER,
		[CCode (cname = "sync_comp_for")] SYNC_COMP_FOR,
		[CCode (cname = "comp_for")] COMP_FOR,
		[CCode (cname = "comp_if")] COMP_IF,
		[CCode (cname = "encoding_decl")] ENCODING_DECL,
		[CCode (cname = "yield_expr")] YIELD_EXPR,
		[CCode (cname = "yield_arg")] YIELD_ARG,
		[CCode (cname = "func_body_suite")] FUNC_BODY_SUITE,
		[CCode (cname = "func_type_input")] FUNC_TYPE_INPUT,
		[CCode (cname = "func_type")] FUNC_TYPE,
		[CCode (cname = "typelist")] TYPELIST,
	}
}
